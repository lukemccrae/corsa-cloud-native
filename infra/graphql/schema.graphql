type Query {
  getActivityById(id: ID!): Activity # do i need this?
  getActivities(
    userId: String!
    limit: Int!
    offset: Int!
    dateFrom: Int!
    dateTo: Int!
    token: String!
  ): [Activity]!
  getPlansByUserId(userId: String!): [Plan]
  getGeoJsonBySortKey(sortKey: String!): FeatureCollection!
}

type Mutation {
  updatePlanById(planInput: PlanInput!): Plan! # do next
  createPlanFromActivity(
    activityId: ID!
    token: String!
    userId: ID!
    planName: String!
  ): CreatedPlan!
}

type FeatureCollection {
  features: [Feature!]
  type: String
}

type Feature {
  type: String
  geometry: Geometry
}

type Geometry {
  type: String
  coordinates: [[Float]]
  properties: GeoProperties
}

type GeoProperties {
  id: Int
  name: String
}

type Activity {
  id: ID!
  name: String!
  start_date: String
  distance: Float!
  # this needs to store activity mile info
  # it might be available from strava
}

type Plan {
  id: String
  userId: String
  name: String
  startTime: Int # start time of the event
  mileData: [MileData] # an array of mile information
}

type MileData {
  elevationGain: Int!
  elevationLoss: Int!
  pace: Int # in seconds per mile
  # elevationProfile: [Int] # a profile of the mile's elevation, 20 points representing the elevation every 5% of the activity
}

type CreatedPlan {
  success: Boolean!
}

type updatedPlan {
  success: Boolean!
}

input MileDataInput {
  pace: Int
}

input PlanInput {
  userId: String!
  sortKey: String!
  planName: String!
  startTime: Int! # start time of the event
  paces: [Int!]!
}
