directive @aws_cognito_user_pools(
  """
  List of cognito user pool groups which have access on this field
  """
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION | INPUT_OBJECT
directive @aws_iam on OBJECT | FIELD_DEFINITION | INPUT_OBJECT

type Query  {
  getPlansByUserId(userId: ID!): [Plan]
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["users"])
  getGeoJsonBySortKey(sortKey: String!): FeatureCollection!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["users"])
  getPlanById(planId: ID!, userId: ID!): Plan!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["users"])
  getPublishedPlans: [Plan]
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["users"])
  getUser: User
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["users"])
  } 

type Mutation {
  updatePlanById(planInput: PlanInput!): UpdatedPlan!
  createPlanFromGeoJson(gpxId: ID!, userId: ID!): CreatedPlan!
  deletePlanById(bucketKey: ID!, userId: String!): DeletePlan!
  updateArticleByPlanId(
    bucketKey: ID!, userId: String!, articleContent: String!): UpdatedArticle!
  publishPlan(
    bucketKey: ID!, userId: String!, published: Boolean!
  ): PublishedPlan!
}

type FeatureCollection @aws_cognito_user_pools @aws_iam {
  features: [Feature!]
  type: String
}

type Feature @aws_cognito_user_pools @aws_iam {
  type: String!
  geometry: Geometry!
  properties: GeoProperties
}

type Geometry @aws_cognito_user_pools @aws_iam {
  type: String
  coordinates: [[Float]]
}

type GeoProperties @aws_cognito_user_pools @aws_iam {
  id: Int
  name: String
  mileData: [S3MileData]
  lastMileDistance: Float
  coordTimes: [String]
  pointMetadata: [PointMetadata]
  maxElevationInFeet: Float
  minElevationInFeet: Float
  minGrade: Float
  maxGrade: Float
  minPace: Int
  maxPace: Int
}

type PointMetadata @aws_cognito_user_pools @aws_iam {
  cumulativeDistance: Float
  grade: Float
  pace: Int
  elevation: Float
  time: String
}

type User @aws_cognito_user_pools @aws_iam {
  profilePicture: String
}

type Plan @aws_cognito_user_pools @aws_iam {
  id: String
  userId: String
  name: String
  startTime: String # start time of the event
  mileData: [MileData] # an array of mile information
  timezone: String
  lastMileDistance: Float
  distanceInMiles: Int
  gainInMeters: Int
  lossInMeters: Int
  durationInSeconds: Int
  gap: Int
  articleContent: String
  published: Boolean
  coverImage: String
  author: String
}

type S3MileData @aws_cognito_user_pools @aws_iam {
  elevationGain: Float!
  elevationLoss: Float!
  index: Int! # starting index for this mile in the coordinates
  stopTime: Int!
}

type MileData @aws_cognito_user_pools @aws_iam {
  elevationGain: Int!
  elevationLoss: Int!
  pace: Int # in seconds per mile
  mileVertProfile: [Int]
  stopTime: Int
  gap: Int
}

type CreatedPlan @aws_cognito_user_pools {
  success: Boolean!
}

type UpdatedPlan @aws_cognito_user_pools {
  success: Boolean!
}

type UpdatedArticle @aws_cognito_user_pools {
  success: Boolean!
}

type PublishedPlan @aws_cognito_user_pools @aws_iam{
  success: Boolean!
}

type DeletePlan @aws_cognito_user_pools {
  success: Boolean!
}

input MileDataInput @aws_cognito_user_pools {
  pace: Int
}

input PlanInput @aws_cognito_user_pools {
  userId: String!
  sortKey: String!
  planName: String!
  startTime: Int! # start time of the event
  paces: [Int!]!
  articleContent: String!
}
