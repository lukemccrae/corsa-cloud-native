{
  "version": 3,
  "sources": ["../handler.ts", "../../clients/httpClient.ts", "../helpers/geoJson.helper.ts", "../services/upsertRecords.service.ts"],
  "sourcesContent": ["import { upsertActivityById, updatePlanById, createPlanFromActivity } from './services/upsertRecords.service'\n\nexport const handler = async (event: any, context: any): Promise<any> => {\n  try {\n    if (event.info.parentTypeName === 'Mutation') {\n      switch (event.info.fieldName) {\n        case 'createPlanFromActivity':\n          console.log(event, '< event')\n          return await createPlanFromActivity(event.arguments)\n        case 'upsertActivity':\n          return upsertActivityById()\n        case 'updatePlan':\n          return updatePlanById()\n      }\n    }\n  } catch (e) {\n    console.log(e)\n  }\n}\n", "export interface StravaHttpProps {\n  token: string\n  url: string\n\n}\n\nexport const stravaGetHttpClient = async (props: StravaHttpProps): Promise<any> => {\n  try {\n    console.log(props, '<< props')\n    const response = await fetch(props.url, {\n      method: 'GET',\n      headers: {\n        // TODO: remove auth through graph\n        Authorization: `Bearer ${props.token}`\n      }\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`)\n    }\n\n    return await response.json()\n  } catch (error) {\n    console.error(error)\n    throw error\n  }\n}\n", "type LatLng = [number, number]\n\n// Create an array of GeoJSON Point features\nexport const makeGeoJson = (latLng: [LatLng], altitude: number[]): any => {\n  const featureCollection = {\n    type: 'FeatureCollection',\n    features: [{\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPoint',\n        coordinates: latLng.map((latLng, i) => [...(latLng.reverse()), altitude[i]])\n      },\n      properties: {\n        id: 1\n      }\n    }]\n  }\n\n  // Convert to a JSON string\n  return featureCollection\n}\n", "import { stravaGetHttpClient } from '../../clients/httpClient'\nimport { makeGeoJson } from '../helpers/geoJson.helper'\nimport { type CreatedPlan } from '../types'\n\ninterface CreatePlanProps {\n  activityId: string\n  token: string\n}\n\nexport const upsertActivityById = (): any => {\n  return {}\n}\n\nexport const updatePlanById = (): any => {\n  return {}\n}\n\nexport const createPlanFromActivity = async (props: CreatePlanProps): Promise<CreatedPlan> => {\n  const { token } = props\n  const url = `https://www.strava.com/api/v3/activities/${props.activityId}/streams?keys=latlng,altitude&key_by_type=true`\n  console.log(url, '<< url')\n  console.log(token, '<< token')\n  try {\n    const latLngAltitudeStream = await stravaGetHttpClient({ token, url })\n    const geoJson = makeGeoJson(latLngAltitudeStream.latlng.data, latLngAltitudeStream.altitude.data)\n    console.log(JSON.stringify(geoJson, null, 2), '<< geoJson')\n    return { success: true }\n  } catch (e) {\n    console.log(e, '<< error')\n    return { success: false }\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCMO,IAAMI,EAAsB,MAAOC,GAAyC,CACjF,GAAI,CACF,QAAQ,IAAIA,EAAO,UAAU,EAC7B,IAAMC,EAAW,MAAM,MAAMD,EAAM,IAAK,CACtC,OAAQ,MACR,QAAS,CAEP,cAAe,UAAUA,EAAM,KAAK,EACtC,CACF,CAAC,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,OAAO,MAAMA,EAAS,KAAK,CAC7B,OAASC,EAAO,CACd,cAAQ,MAAMA,CAAK,EACbA,CACR,CACF,ECvBO,IAAMC,EAAc,CAACC,EAAkBC,KAClB,CACxB,KAAM,oBACN,SAAU,CAAC,CACT,KAAM,UACN,SAAU,CACR,KAAM,aACN,YAAaD,EAAO,IAAI,CAACA,EAAQE,IAAM,CAAC,GAAIF,EAAO,QAAQ,EAAIC,EAASC,CAAC,CAAC,CAAC,CAC7E,EACA,WAAY,CACV,GAAI,CACN,CACF,CAAC,CACH,GCPK,IAAMC,EAAqB,KACzB,CAAC,GAGGC,EAAiB,KACrB,CAAC,GAGGC,EAAyB,MAAOC,GAAiD,CAC5F,GAAM,CAAE,MAAAC,CAAM,EAAID,EACZE,EAAM,4CAA4CF,EAAM,UAAU,iDACxE,QAAQ,IAAIE,EAAK,QAAQ,EACzB,QAAQ,IAAID,EAAO,UAAU,EAC7B,GAAI,CACF,IAAME,EAAuB,MAAMC,EAAoB,CAAE,MAAAH,EAAO,IAAAC,CAAI,CAAC,EAC/DG,EAAUC,EAAYH,EAAqB,OAAO,KAAMA,EAAqB,SAAS,IAAI,EAChG,eAAQ,IAAI,KAAK,UAAUE,EAAS,KAAM,CAAC,EAAG,YAAY,EACnD,CAAE,QAAS,EAAK,CACzB,OAASE,EAAG,CACV,eAAQ,IAAIA,EAAG,UAAU,EAClB,CAAE,QAAS,EAAM,CAC1B,CACF,EH7BO,IAAMC,EAAU,MAAOC,EAAYC,IAA+B,CACvE,GAAI,CACF,GAAID,EAAM,KAAK,iBAAmB,WAChC,OAAQA,EAAM,KAAK,UAAW,CAC5B,IAAK,yBACH,eAAQ,IAAIA,EAAO,SAAS,EACrB,MAAME,EAAuBF,EAAM,SAAS,EACrD,IAAK,iBACH,OAAOG,EAAmB,EAC5B,IAAK,aACH,OAAOC,EAAe,CAC1B,CAEJ,OAASC,EAAG,CACV,QAAQ,IAAIA,CAAC,CACf,CACF",
  "names": ["handler_exports", "__export", "handler", "__toCommonJS", "stravaGetHttpClient", "props", "response", "error", "makeGeoJson", "latLng", "altitude", "i", "upsertActivityById", "updatePlanById", "createPlanFromActivity", "props", "token", "url", "latLngAltitudeStream", "stravaGetHttpClient", "geoJson", "makeGeoJson", "e", "handler", "event", "context", "createPlanFromActivity", "upsertActivityById", "updatePlanById", "e"]
}
